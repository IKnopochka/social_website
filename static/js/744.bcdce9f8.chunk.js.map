{"version":3,"file":"static/js/744.bcdce9f8.chunk.js","mappings":"oKACA,G,QAAA,CAAgB,QAAU,yBAAyB,KAAO,sBAAsB,OAAS,wBAAwB,SAAW,0BAA0B,SAAW,4B,mBCIpJA,EAAa,SAACC,GACvB,OAAOC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAAA,KAAaC,UAChCC,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAACC,GAAI,aAAeP,EAAMQ,GAAIN,UAAW,SAAAO,GAAU,OAAAA,EAARC,SAAyBP,EAAAA,OAAiBA,EAAAA,IAAY,EAACC,SAAA,EACtGH,EAAAA,EAAAA,KAAA,OAAKU,IAAKX,EAAMW,MACfX,EAAMY,SAGnB,ECRaC,EAAc,SAACb,GAExB,OAAOC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAAA,IAAYC,SAAEJ,EAAMc,SAC/C,E,uCCkBA,GAAeC,EAAAA,EAAAA,GAAgC,CAACC,KAAM,UAAtD,EAhBoB,SAAChB,GACjB,IAAOiB,EAAgBjB,EAAhBiB,aACP,OACIZ,EAAAA,EAAAA,MAAA,QAAMa,SAAUD,EAAab,SAAA,EACzBH,EAAAA,EAAAA,KAACkB,EAAAA,EAAK,CACFP,KAAM,UACNQ,UAAWC,EAAAA,EACXC,YAAa,qBACbC,SAAU,CAACC,EAAAA,OAEfvB,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,kBAIpB,ICOA,EAtBgB,SAACJ,GAEb,IAAIyB,EAAkBzB,EAAM0B,QAAQC,KAAI,SAAAC,GAAC,OAAK3B,EAAAA,EAAAA,KAACF,EAAU,CAACS,GAAIoB,EAAEpB,GAAII,KAAMgB,EAAEhB,KAAMD,IAAKiB,EAAEjB,KAAM,IAC3FkB,EAAmB7B,EAAM8B,SAASH,KAAI,SAAAI,GAAC,OAAK9B,EAAAA,EAAAA,KAACY,EAAW,CAACL,GAAIuB,EAAEvB,GAAIM,QAASiB,EAAEjB,SAAU,IAM5F,OACIT,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAAA,QAAgBC,SAAA,EAC5BH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAAA,QAAgBC,SAC3BqB,KAELpB,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAAA,SAAiBC,SAAA,CAC5ByB,GACD5B,EAAAA,EAAAA,KAAC+B,EAAW,CAACd,SAXV,SAACe,GACZjC,EAAMkC,aAAaD,EAAKnB,QAC5B,SAaJ,E,8BCPA,GAAeqB,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAbkB,SAACC,GACnB,MAAO,CACHX,QAASW,EAAMC,YAAYZ,QAC3BI,SAAUO,EAAMC,YAAYR,SAEpC,IACyB,SAACS,GACtB,MAAO,CACHL,aAAc,SAACpB,GAAqByB,GAASC,EAAAA,EAAAA,IAAwB1B,GAAS,EAEtF,IAII2B,EAAAA,EAFJ,CAGEC,E","sources":["webpack://project1/./src/components/Navbar/Messages/Dialogs.module.css?0370","components/Navbar/Messages/DialogItem/DialogItem.tsx","components/Navbar/Messages/MessageItem/MessageItem.tsx","components/Navbar/Messages/MessageForm/MessageForm.tsx","components/Navbar/Messages/Dialogs.tsx","components/Navbar/Messages/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__76Trw\",\"name\":\"Dialogs_name__QY8Iz\",\"active\":\"Dialogs_active__yLTKi\",\"messages\":\"Dialogs_messages__F0VVq\",\"textArea\":\"Dialogs_textArea__eWkYC\"};","import React from \"react\";\nimport classes from \"./../Dialogs.module.css\";\nimport {NavLink} from \"react-router-dom\";\nimport {DialogItemProps} from \"../../../../state/store\";\n\nexport const DialogItem = (props: DialogItemProps) => {\n    return <div className={classes.name}>\n        <NavLink to={\"dialogs/*/\" + props.id} className={({isActive}) => isActive ? classes.active : classes.name}>\n            <img src={props.src}/>\n            {props.name}\n        </NavLink>\n    </div>\n}","import React from \"react\";\nimport classes from \"./../Dialogs.module.css\";\nimport {MessageItemProps} from \"../../../../state/store\";\n\nexport const MessageItem = (props: MessageItemProps) => {\n\n    return <div className={classes.msg}>{props.message}</div>\n}","import React from 'react';\nimport  {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {textareaField} from \"../../../../assets/ValidationForm/RenderValidationField\";\nimport {maxLength200} from \"../../../../assets/ValidationForm/validators\";\n\nexport type MessageFormPropsType = {\n    message: string\n}\n\nconst MessageForm = (props: InjectedFormProps<MessageFormPropsType>) => {\n    const {handleSubmit} = props\n    return (\n        <form onSubmit={handleSubmit}>\n            <Field\n                name={'message'}\n                component={textareaField}\n                placeholder={'Enter your message'}\n                validate={[maxLength200]}\n            />\n            <button>Add Message</button>\n        </form>\n\n    );\n};\n\nexport default reduxForm<MessageFormPropsType>({form: 'dialog'})(MessageForm);","import React from \"react\";\nimport classes from \"./Dialogs.module.css\";\nimport {DialogItem} from \"./DialogItem/DialogItem\";\nimport {MessageItem} from \"./MessageItem/MessageItem\";\nimport {DialogsPagePropsType} from \"../../../state/store\";\nimport MessageForm, {MessageFormPropsType} from \"./MessageForm/MessageForm\";\n\n\nconst Dialogs = (props: DialogsPagePropsType) => {\n\n    let dialogsElements = props.dialogs.map(d => (<DialogItem id={d.id} name={d.name} src={d.src}/>))\n    let messagesElements = props.messages.map(m => (<MessageItem id={m.id} message={m.message}/>))\n\n    const Submit = (data: MessageFormPropsType) => {\n        props.onAddMessage(data.message)\n    }\n\n    return (\n        <div className={classes.dialogs}>\n            <div className={classes.friends}>\n                {dialogsElements}\n            </div>\n            <div className={classes.messages}>\n                {messagesElements}\n                <MessageForm onSubmit={Submit}/>\n            </div>\n        </div>\n    )\n}\n\nexport default Dialogs","import React, {ComponentType} from \"react\";\nimport {AddMessageActionCreator} from \"../../../state/dialogsPageReducer\";\nimport Dialogs from \"./Dialogs\";\nimport {AppRootStateType} from \"../../../state/redux-store\";\nimport {DialogsMapToDispatchPropsType, DialogsPropsType} from \"../../../state/store\";\nimport {compose, Dispatch} from \"redux\";\nimport {withAuthRedirect} from \"../../../HOC/withAuthRedirect\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToProps = (state: AppRootStateType): DialogsPropsType => {\n    return {\n        dialogs: state.dialogsPage.dialogs,\n        messages: state.dialogsPage.messages,\n    }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): DialogsMapToDispatchPropsType => {\n    return {\n        onAddMessage: (message: string) => {dispatch(AddMessageActionCreator(message))}\n    }\n}\n\nexport default compose<ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)"],"names":["DialogItem","props","_jsx","className","classes","children","_jsxs","NavLink","to","id","_ref","isActive","src","name","MessageItem","message","reduxForm","form","handleSubmit","onSubmit","Field","component","textareaField","placeholder","validate","maxLength200","dialogsElements","dialogs","map","d","messagesElements","messages","m","MessageForm","data","onAddMessage","compose","connect","state","dialogsPage","dispatch","AddMessageActionCreator","withAuthRedirect","Dialogs"],"sourceRoot":""}